CCS PCH C Compiler, Version 4.140, 31805               06-fev-14 09:58

               Filename:   D:\Eletronica\Projetos\BLDC\main.lst

               ROM used:   466 bytes (1%)
                           Largest free fragment is 32298
               RAM used:   32 (2%) at main() level
                           33 (2%) worst case
               Stack:     2 worst case (1 in main + 1 for interrupts)

*
0000:  GOTO   00FA
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /* 
....................  * main.c 
....................  * 
....................  *  Created on: 03/02/2014 
....................  *      Author: cuki 
....................  */ 
.................... #include<18F45K20.h> 
.................... //////// Standard Header file for the PIC18F45K20 device //////////////// 
.................... #device PIC18F45K20 
.................... #list 
....................  
....................  
.................... #fuses HS 
....................  
.................... #use delay(clock=15MHz) 
*
00D0:  MOVLW  06
00D2:  SUBWF  20,F
00D4:  BNC   00F8
00D6:  CLRF   FEA
00D8:  MOVLW  20
00DA:  MOVWF  FE9
00DC:  MOVLW  FC
00DE:  ANDWF  FEF,F
00E0:  BCF    FD8.0
00E2:  RRCF   FEF,F
00E4:  RRCF   FEF,F
00E6:  MOVF   FEF,W
00E8:  BZ    00F8
00EA:  MOVLW  03
00EC:  MOVWF  00
00EE:  DECFSZ 00,F
00F0:  BRA    00EE
00F2:  BRA    00F4
00F4:  DECFSZ FEF,F
00F6:  BRA    00EA
00F8:  RETURN 0
.................... #use rs232(xmit=PIN_C6, baud=9600) 
....................  
.................... int a = FALSE, b = FALSE, c = FALSE; 
.................... int cont = 0; 
.................... long tempo = 30000; 
....................  
.................... #INT_EXT 
.................... void isr_ext() { 
.................... 	clear_interrupt(INT_EXT); 
*
00AE:  BCF    FF2.1
.................... 	tempo -= 100; 
00B0:  MOVLW  64
00B2:  SUBWF  1D,F
00B4:  MOVLW  00
00B6:  SUBWFB 1E,F
.................... 	if (tempo == 100) 
00B8:  MOVF   1D,W
00BA:  SUBLW  64
00BC:  BNZ   00CA
00BE:  MOVF   1E,F
00C0:  BNZ   00CA
.................... 		tempo = 30000; 
00C2:  MOVLW  75
00C4:  MOVWF  1E
00C6:  MOVLW  30
00C8:  MOVWF  1D
.................... } 
....................  
00CA:  BCF    FF2.1
00CC:  GOTO   0060
.................... int main(void) { 
*
00FA:  CLRF   FF8
00FC:  BCF    FD0.7
00FE:  BSF    07.7
0100:  CLRF   FEA
0102:  CLRF   FE9
0104:  BCF    F94.6
0106:  BSF    F8B.6
0108:  CLRF   19
010A:  CLRF   1A
010C:  CLRF   1B
010E:  CLRF   1C
0110:  MOVLW  75
0112:  MOVWF  1E
0114:  MOVLW  30
0116:  MOVWF  1D
0118:  MOVLW  00
011A:  MOVWF  F7E
011C:  BCF    FC1.4
011E:  BCF    FC1.5
0120:  MOVF   F7F,W
0122:  ANDLW  E0
0124:  MOVWF  F7F
0126:  BCF    F79.5
0128:  BCF    F79.4
012A:  CLRF   F7A
012C:  CLRF   F7B
....................  
.................... 	clear_interrupt(INT_EXT); 
012E:  BCF    FF2.1
.................... 	enable_interrupts(INT_EXT); 
0130:  BSF    FF2.4
.................... 	enable_interrupts(GLOBAL); 
0132:  MOVLW  C0
0134:  IORWF  FF2,F
....................  
.................... 	while (TRUE) { 
.................... 		if (cont == 6) 
0136:  MOVF   1C,W
0138:  SUBLW  06
013A:  BNZ   013E
.................... 			cont = 0; 
013C:  CLRF   1C
....................  
.................... 		a = (cont & 0b100) >> 2; 
013E:  MOVF   1C,W
0140:  ANDLW  04
0142:  MOVWF  00
0144:  RRCF   00,W
0146:  MOVWF  19
0148:  RRCF   19,F
014A:  MOVLW  3F
014C:  ANDWF  19,F
.................... 		b = (cont & 0b10) >> 1; 
014E:  MOVF   1C,W
0150:  ANDLW  02
0152:  MOVWF  00
0154:  BCF    FD8.0
0156:  RRCF   00,W
0158:  MOVWF  1A
.................... 		c = cont & 1; 
015A:  MOVF   1C,W
015C:  ANDLW  01
015E:  MOVWF  1B
....................  
.................... 		output_bit(PIN_D0, (!(b & c)) & !a); 
0160:  MOVF   1A,W
0162:  ANDWF  1B,W
0164:  BZ    016A
0166:  MOVLW  00
0168:  BRA    016C
016A:  MOVLW  01
016C:  MOVWF  1F
016E:  MOVF   19,F
0170:  BZ    0176
0172:  MOVLW  00
0174:  BRA    0178
0176:  MOVLW  01
0178:  ANDWF  1F,W
017A:  BNZ   0180
017C:  BCF    F8C.0
017E:  BRA    0182
0180:  BSF    F8C.0
0182:  BCF    F95.0
.................... 		output_bit(PIN_D1, b | (!c & a)); 
0184:  MOVF   1B,F
0186:  BZ    018C
0188:  MOVLW  00
018A:  BRA    018E
018C:  MOVLW  01
018E:  ANDWF  19,W
0190:  IORWF  1A,W
0192:  BNZ   0198
0194:  BCF    F8C.1
0196:  BRA    019A
0198:  BSF    F8C.1
019A:  BCF    F95.1
.................... 		output_bit(PIN_D2, (!a & c) | b); 
019C:  MOVF   19,F
019E:  BZ    01A4
01A0:  MOVLW  00
01A2:  BRA    01A6
01A4:  MOVLW  01
01A6:  ANDWF  1B,W
01A8:  IORWF  1A,W
01AA:  BNZ   01B0
01AC:  BCF    F8C.2
01AE:  BRA    01B2
01B0:  BSF    F8C.2
01B2:  BCF    F95.2
....................  
.................... 		cont++; 
01B4:  INCF   1C,F
.................... 		delay_us(tempo); 
01B6:  MOVFF  1E,1F
01BA:  INCF   1F,F
01BC:  DECF   1F,F
01BE:  BTFSC  FD8.2
01C0:  BRA    01C8
01C2:  SETF   20
01C4:  RCALL  00D0
01C6:  BRA    01BC
01C8:  MOVFF  1D,20
01CC:  RCALL  00D0
.................... 	} 
01CE:  BRA    0136
....................  
.................... 	return 0; 
01D0:  MOVLW  00
01D2:  MOVWF  01
.................... } 
....................  
.................... //int cont = 1; 
.................... //int cont2 = 0; 
.................... //long tempo = 300; 
.................... //short ctrl = FALSE; 
.................... //short trigger = FALSE; 
.................... // 
.................... //#INT_EXT 
.................... //void isr_ext() { 
.................... //	clear_interrupt(INT_EXT); 
.................... //	ctrl = TRUE; 
.................... //	cont <<= 1; 
.................... //	if (cont == 8 | !cont) 
.................... //		cont = 1; 
.................... //} 
.................... // 
.................... //int main(void) { 
.................... // 
.................... //	clear_interrupt(INT_EXT); 
.................... //	enable_interrupts(INT_EXT); 
.................... //	enable_interrupts(GLOBAL); 
.................... // 
.................... //	while (TRUE) { 
.................... //		if (ctrl) { 
.................... //			ctrl = FALSE; 
.................... //			output_d(cont); 
.................... //		} 
.................... //	} 
.................... //	return 0; 
.................... //} 
....................  
.................... //int cont = 1; 
.................... //int cont2 = 0; 
.................... //long tempo = 300; 
.................... //short ctrl = FALSE; 
.................... //short trigger = FALSE; 
.................... // 
.................... //#INT_EXT 
.................... //void isr_ext() { 
.................... //	clear_interrupt(INT_EXT); 
.................... //	tempo -= 10; 
.................... //	if (!tempo) 
.................... //		tempo = 300; 
.................... //} 
.................... // 
.................... //int main(void) { 
.................... // 
.................... //	clear_interrupt(INT_EXT); 
.................... //	enable_interrupts(INT_EXT); 
.................... //	enable_interrupts(GLOBAL); 
.................... // 
.................... //	while (TRUE) { 
.................... //		cont <<= 1; 
.................... //		if (cont == 8) 
.................... //			cont = 1; 
.................... //		output_d(cont); 
.................... //		delay_ms(tempo); 
.................... //	} 
.................... //	return 0; 
.................... //} 
....................  
01D4:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV18 NOWDT WDT32768
   Word  3: 8F00   CCP2C1 PBADEN LPT1OSC HFOFST MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
